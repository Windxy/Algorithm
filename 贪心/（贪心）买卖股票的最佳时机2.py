# coding:utf-8
'''
**************************************************
@File   ：python_dp -> （贪心）买卖股票的最佳时机2
@IDE    ：PyCharm
@Author ：Small_wind
@Date   ：2020/11/8 14:26
**************************************************
'''
'''
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
示例 1:

输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
'''
'''
贪心法就是遍历一次，累计增加的利润
'''
class Solution(object):
    def maxProfit(self, prices):
        if not prices:
            return 0
        n = len(prices)
        dp = [[0]*2 for _ in range(len(prices))]
        # 初始化第一天
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        print(dp)
        for i in range(1, n):
            # 求第i天的买入最大利润，卖出最大利润
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i]) # 第i天没有持票的情况，最大来自于前一天也没有票，或前一天有票，今天卖出去
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]) # 第i天有票的情况，最大来自于前一天也有票，或昨天没票，今天买了
        return dp[-1][0]

s = Solution()
s.maxProfit([1,2,3,4,5])